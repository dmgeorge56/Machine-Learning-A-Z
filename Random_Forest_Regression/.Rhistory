stargazer(pwt2007c2, type="html"")
stargazer(pwt2007c2, type="html")
grid.table(pwt2007c2)
??grid.table
install.packages("gridExtra")
library(grid.table)
library(gridExtra)
grid.table(pwt2007c2)
test <- grid.table(pwt2007c2)
test
pdf("pwt2007.pdf", height=11, width=8.5)
test <- grid.table(pwt2007c2)
test
dev.off()
install.packages("xtable")
library(xtable)
print(xtable(pwt2007c2))
print(xtable(pwt2007c2, type="html"))
print(xtable(pwt2007c2), type="html")
library(knitr)
kable(pwt2007c2, format='html')
is.num <- sapply(pwt2007c, is.numeric)
pwt2007c[is.num] <- lapply(pwt2007c[is.num], round, 2)
head(pwt2007c)
pwt2007c2 <- with(pwt2007c, pwt2007c[order(-cgdpe),])
kable(pwt2007c2, format='html')
colnames(pwt2007c2) <- c("Country Code", "Country" ,"Year", "Y" , "L", "K", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3")
kable(pwt2007c2, format='html')
slide11 <- subset(pwt2007c2, select=c("Country","Year", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3""))
kable(slide11, format='html')
slide11 <- subset(pwt2007c2, select=c("Country","Year", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3"))
kable(slide11, format='html')
kable(slide11, format='html',row.names = NA)
kable(slide11, format='html',row.names = F)
slide11 <- with(slide11, slide11[order(-Observed Captial Per Person, kbar),])
pwt2007c2 <- with(pwt2007c, pwt2007c[order(-ypp),])
colnames(pwt2007c2) <- c("Country Code", "Country" ,"Year", "Y" , "L", "K", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3")
slide11 <- subset(pwt2007c2, select=c("Country","Year", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3"))
kable(slide11, format='html',row.names = F)
ggplot(pwt2007c2, y=Predicted Y Per Person, kbar^1/3, x=Observed Y Per Person)
ggplot(pwt2007c2, y=Predicted Y Per Person, kbar^1/3, x=Observed Y Per Person
ggplot(pwt2007c2, y=Predicted Y Per Person, kbar^1/3, x=Observed Y Per Person
ggplot(pwt2007c2, y=pypp, x=ypp
+ geom_dotplot())
library(ggplot2)
ggplot(pwt2007c2, y=pypp, x=ypp
+ geom_dotplot())
ggplot(pwt2007c, y=pypp, x=ypp
+ geom_dotplot())
ggplot(pwt2007c, aes(x=ypp)
+ geom_dotplot())
ggplot(pwt2007c, aes(ypp, pypp)
+ geom_point())
str(pwt2007c)
ggplot(pwt2007c, aes(ypp, pypp))
ggplot(pwt2007c, aes(ypp, pypp)
+ geom_point(aes(colour = factor(country)), size = 4))
ggplot(pwt2007c, aes(ypp, pypp))
ggplot(pwt2007c, aes(ypp, pypp) + geom_point(aes(colour = factor(country)), size = 4))
ggplot(pwt2007c, aes(ypp, kpp) + geom_point(aes(colour = factor(country)), size = 4))
ggplot(pwt2007c, aes(ypp, kpp) + geom_point(aes(colour = factor(country))))
head(pwt2007c)
with(pwt2007c, ggplot(pwt2007c, aes(ypp, pkpp) + geom_point(aes(colour = factor(country)), size = 4)))
ggplot(pwt2007c, aes(ypp, pkpp))
ggplot(pwt2007c, aes(ypp, pypp))
ggplot(pwt2007c, aes(ypp, pypp) + geom_point())
ggplot(pwt2007c, aes(ypp, pypp) + geom_point(aes(colour = factor(country)), size = 4))
ggplot(pwt2007c, aes(ypp, pypp) + geom_point(aes(colour = factor(country)), size = 4))
ggplot(pwt2007c, aes(ypp, pypp)
+ geom_point()
+ aes(colour = factor(country)), size = 4)
ggplot(pwt2007c, aes(ypp, pypp)
+ geom_point()
+ aes(colour = factor(country)))
ggplot(pwt2007c, aes(ypp, pypp) + geom_point() + aes(colour = factor(country)))
ggplot(pwt2007c, aes(ypp, pypp) +
geom_point() +
aes(colour = factor(country)))
names(pwt2007c)
ggplot(pwt2007c, aes(x=ypp, y=pypp, group=country) + geom_point(aes(colour = country)))
ggplot(pwt2007c, aes(x=ypp, y=pypp, group=country))
plot <- colanmes(pwt2007c2, c("Country","Year", "kbar", "Observed Y Per Person", "pypp", "kbar13"))
plot <- colnames(pwt2007c2, c("Country","Year", "kbar", "Observed Y Per Person", "pypp", "kbar13"))
plot <- col.names(pwt2007c2, c("Country","Year", "kbar", "Observed Y Per Person", "pypp", "kbar13"))
plot <- colnames(pwt2007c2, c("Country","Year", "kbar", "Observed Y Per Person", "pypp", "kbar13"))
plot <- colnames(pwt2007c2, c("Country","Year", "kbar", "oypp", "pypp", "kbar13"))
colnames(pwt2007c2, c("Country","Year", "kbar", "oypp", "pypp", "kbar13"))
colnames(pwt2007c2, c("Country","Year", "kbar", "oypp", "pypp", "kbar13"))
pwt <- read.csv("Documents/Macro/hw2data_pwt.csv", header=T)
pwt <- read.csv("Documents/Macro/hw2data_pwt.csv", header=T)
setwd("/Documents")
pwt <- read.csv(file="/Users/Dana/Documents/Macro/hw2data_pwt.csv", header=T)
#Use the following variables for your analysis: Y = cgdpe, L = pop, K = ck. These output and capital variables are measured in current PPPs, in units of ”current US output”. That way these numbers are all expressed in the same units and are comparable across countries. Other than year, and maybe country and/or countrycode you don’t really need any other variables. So you can safely drop the rest.
pwt2 <- subset(pwt, select=c("countrycode","country","year","cgdpe", "pop","ck"))
##remove rows with blank cells
pwt3 <- pwt2[!is.na(pwt2$cgdpe), ]
##subset data to only look at 2007
pwt2007 <- pwt3[(pwt3$year == "2007"), ]
##subset data to only look at certain counties
pwt2007c <- pwt2007[(pwt2007$country == "United States"|pwt2007$country =="Switzerland"|pwt2007$country =="Japan"|pwt2007$country =="Italy"|pwt2007$country =="Spain"|pwt2007$country =="United Kingdom"|pwt2007$country =="Brazil"|pwt2007$country =="China"|pwt2007$country =="South Africa"|pwt2007$country =="India"|pwt2007$country =="Burundi"), ]
##find capital per person (kbar)
pwt2007c$kpp <- with(pwt2007c, (ck/pop)/163778.4)
##find GDP per person (kbar^1/3)
pwt2007c$ypp <- with(pwt2007c, (cgdpe/pop)/51441.54)
##find predicted GDP per person
pwt2007c$pypp <- with(pwt2007c, kpp^(1/3)/54.71)
##take out some decimal places
is.num <- sapply(pwt2007c, is.numeric)
pwt2007c[is.num] <- lapply(pwt2007c[is.num], round, 2)
##reorder so income per person is in decending order
pwt2007c2 <- with(pwt2007c, pwt2007c[order(-ypp),])
##change column names for table format
colnames(pwt2007c2) <- c("Country Code", "Country" ,"Year", "Y" , "L", "K", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3")
##Create new df without y, l and k
slide11 <- subset(pwt2007c2, select=c("Country","Year", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3"))
##stargazer it up
library(knitr)
kable(slide11, format='html',row.names = F, align = c('l','c','c','c','c'))
pwt <- read.csv(file="/Users/Dana/Documents/Macro/hw2data_pwt.csv", header=T)
#Use the following variables for your analysis: Y = cgdpe, L = pop, K = ck. These output and capital variables are measured in current PPPs, in units of ”current US output”. That way these numbers are all expressed in the same units and are comparable across countries. Other than year, and maybe country and/or countrycode you don’t really need any other variables. So you can safely drop the rest.
pwt2 <- subset(pwt, select=c("countrycode","country","year","cgdpe", "pop","ck"))
##remove rows with blank cells
pwt3 <- pwt2[!is.na(pwt2$cgdpe), ]
##subset data to only look at 2007
pwt2007 <- pwt3[(pwt3$year == "2007"), ]
##subset data to only look at certain counties
pwt2007c <- pwt2007[(pwt2007$country == "United States"|pwt2007$country =="Switzerland"|pwt2007$country =="Japan"|pwt2007$country =="Italy"|pwt2007$country =="Spain"|pwt2007$country =="United Kingdom"|pwt2007$country =="Brazil"|pwt2007$country =="China"|pwt2007$country =="South Africa"|pwt2007$country =="India"|pwt2007$country =="Burundi"), ]
##find capital per person (kbar)
pwt2007c$kpp <- with(pwt2007c, (ck/pop)/163778.4)
##find GDP per person (kbar^1/3)
pwt2007c$ypp <- with(pwt2007c, (cgdpe/pop)/51441.54)
##find predicted GDP per person
pwt2007c$pypp <- with(pwt2007c, (kpp^(1/3))/54.71)
##take out some decimal places
is.num <- sapply(pwt2007c, is.numeric)
pwt2007c[is.num] <- lapply(pwt2007c[is.num], round, 2)
##reorder so income per person is in decending order
pwt2007c2 <- with(pwt2007c, pwt2007c[order(-ypp),])
##change column names for table format
colnames(pwt2007c2) <- c("Country Code", "Country" ,"Year", "Y" , "L", "K", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3")
##Create new df without y, l and k
slide11 <- subset(pwt2007c2, select=c("Country","Year", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3"))
##stargazer it up
library(knitr)
kable(slide11, format='html',row.names = F, align = c('l','c','c','c','c'))
##reorder so income per person is in decending order
pwt2007c2 <- with(pwt2007c, pwt2007c[order(-ypp),])
##change column names for table format
colnames(pwt2007c2) <- c("Country Code", "Country" ,"Year", "Y" , "L", "K", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3")
##Create new df without y, l and k
slide11 <- subset(pwt2007c2, select=c("Country","Year", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3"))
##stargazer it up
library(knitr)
kable(slide11, format='html',row.names = F, align = c('l','c','c','c','c'))
pwt <- read.csv(file="/Users/Dana/Documents/Macro/hw2data_pwt.csv", header=T)
#Use the following variables for your analysis: Y = cgdpe, L = pop, K = ck. These output and capital variables are measured in current PPPs, in units of ”current US output”. That way these numbers are all expressed in the same units and are comparable across countries. Other than year, and maybe country and/or countrycode you don’t really need any other variables. So you can safely drop the rest.
pwt2 <- subset(pwt, select=c("countrycode","country","year","cgdpe", "pop","ck"))
##remove rows with blank cells
pwt3 <- pwt2[!is.na(pwt2$cgdpe), ]
##subset data to only look at 2007
pwt2007 <- pwt3[(pwt3$year == "2007"), ]
##subset data to only look at certain counties
pwt2007c <- pwt2007[(pwt2007$country == "United States"|pwt2007$country =="Switzerland"|pwt2007$country =="Japan"|pwt2007$country =="Italy"|pwt2007$country =="Spain"|pwt2007$country =="United Kingdom"|pwt2007$country =="Brazil"|pwt2007$country =="China"|pwt2007$country =="South Africa"|pwt2007$country =="India"|pwt2007$country =="Burundi"), ]
##find capital per person (kbar)
pwt2007c$kpp <- with(pwt2007c, (ck/pop)/163778.4)
##find GDP per person (kbar^1/3)
pwt2007c$ypp <- with(pwt2007c, (cgdpe/pop)/51441.54)
##find predicted GDP per person
pwt2007c$pypp <- with(pwt2007c, ((ck/pop)^(1/3))/54.71)
##take out some decimal places
is.num <- sapply(pwt2007c, is.numeric)
pwt2007c[is.num] <- lapply(pwt2007c[is.num], round, 2)
##reorder so income per person is in decending order
pwt2007c2 <- with(pwt2007c, pwt2007c[order(-ypp),])
##change column names for table format
colnames(pwt2007c2) <- c("Country Code", "Country" ,"Year", "Y" , "L", "K", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3")
##Create new df without y, l and k
slide11 <- subset(pwt2007c2, select=c("Country","Year", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3"))
##stargazer it up
library(knitr)
kable(slide11, format='html',row.names = F, align = c('l','c','c','c','c'))
colnames(slide11) <- c("Country","Year", "kbar", "oypp", "pypp")
library(plotly)
with(slide11, plot_ly(slide11, x = ~oypp, y = ~pypp, color=Country, alpha=1))
##subset data to only look at 2007
#pwt2007 <- pwt3[(pwt3$year == "2007"), ]
##subset data to only look at certain counties
#pwt2007c <- pwt2007[(pwt2007$country == "United States"|pwt2007$country =="Switzerland"|pwt2007$country =="Japan"|pwt2007$country =="Italy"|pwt2007$country =="Spain"|pwt2007$country =="United Kingdom"|pwt2007$country =="Brazil"|pwt2007$country =="China"|pwt2007$country =="South Africa"|pwt2007$country =="India"|pwt2007$country =="Burundi"), ]
##make variables
##Per capita Y
pwt2007c2$ypp <- with(pwt2007c2, (Y/L)/51440.85)
##find predicted GDP per person (kbar^1/3)
pwt2007c2$pypp <- with(pwt2007c2, ((K/L)^(1/3)/54.71)
##implied TFP (abar) = Total Factor Productivity (TFP) is the portion of output not explained by the amount of inputs used in production. Its level is determined by how efficiently and intensely the inputs are utilized in production.
#where TFP = The residual from solow model = gY − α ∗ gK − (1 − α) ∗ gL. The Solow residual accurately measures TFP growth if (i) the production function is neoclassical, (ii) there is perfect competition in factor markets, and (iii) the growth rates of the inputs are measured accurately.
##Calculate by:
##1. Y/K = capital productivity
##2. Y/L = labor productivity
##3. (Y/K)^1/3 * (Y/L)^2/3
pwt2007c2$tfp <- with(pwt2007c2, (((Y/K)^(1/3)*(Y/L)^(2/3))/940.21)/)
pwt2007c2$pypp <- with(pwt2007c2, ((K/L)^(1/3)/54.71))
pwt2007c2$tfp <- with(pwt2007c2, (((Y/K)^(1/3)*(Y/L)^(2/3))/940.21)/)
pwt2007c2$tfp <- with(pwt2007c2, (((Y/K)^(1/3)*(Y/L)^(2/3))/940.21))
is.num <- sapply(pwt2007c2, is.numeric)
pwt2007c2[is.num] <- lapply(pwt2007c2[is.num], round, 2)
##reorder so income per person is in decending order
pwt2007c3 <- with(pwt2007c2, pwt2007c2[order(-ypp),])
##change column names for table format
colnames(pwt2007c3) <- c("Country Code", "Country" ,"Year", "Y" , "L", "K", "Observed Captial Per Person, kbar", "Observed Y Per Person", "Predicted Y Per Person, kbar^1/3", "TFP, Abar","Per Capita Y","Predicted Y Per Person, kbar^1/3")
##Create new df without y, l and k and other variables not in table on slide 19
slide19 <- subset(pwt2007c3, select=c("Country","Year", "TFP, Abar","Per Capita Y","Predicted Y Per Person, kbar^1/3"))
##kable it up
library(knitr)
kable(slide19, format='html',row.names = F, align= c('l','c','c','c','c'))
colnames(slide19) <- c("Country","Year", "tfp", "ypp", "pypp")
library(plotly)
with(slide19, plot_ly(slide19, x = ~ypp, y = ~tfp, color=Country, alpha=1))
rm
rm()
rm(pwt)
rm(pwt2)
rm(x)
rm(.)
rm(pwt2007)
rm(pwt2007c)
rm(pwt2007c2)
rm(pwt2007c3)
rm(pwt3)
rm(slide11)
rm(slide19)
rm(is.num)
import numpy as np ##for math stuffz
import numpy as np
ccc <- read.csv("Documents/KP/Insights_noPHI_small.csv")
getwd()
ccc <- read.csv("Downloads/KP/Insights_noPHI_small.csv")
ccc <- read.csv("Downloads/Insights_noPHI_small.csv")
getwd()
c <- read.csv("Downloads/Insights_noPHI_small2.csv")
getwd()
c <- read.csv("Downloads/Insights_noPHI_small2.csv")
head(c)
ccc$Remarks <- as.character(ccc$Remarks)
c$Remarks <- as.character(c$Remarks)
head(c)
cc <- c[!(c$Remarks == "CASE DETAIL"), ]
head(cc)
str(cc$Remarks)
library(tidyr)
ccs <- cc %>%
separate(Remarks, sep="CASE DETAIL:", into = c("A","B"), extra="drop", fill="warn")
cc$Remarks[3]
cc$Remarks[4]
cc$Remarks[1]
ccs2 <- ccs %>%
separate(B, sep="Who:", into = c("C","D"), extra = "drop", fill="warn")
ccs2$Remarks[4]
ccs2$Remarks[1]
ccs2$B[1]
ccs2$B[2]
ccs$B[2]
ccs$B[3]
ccs$B[5]
ccs$B[6]
ccs$B
View(ccs)
ccs2 <- c[is.na!(ccs$B == "NA"), ]
ccs2 <- ccs[is.na!(ccs$B == "NA"), ]
ccs2 <- ccs[!(is.na(ccs$B == "NA")), ]
View(ccs)
View(ccs2)
str(ccs2$B)
ccs3 <- ccs2 %>%
separate(B, sep="Who:", into = c("C","D"), extra = "drop", fill="warn")
str(ccs2$B)
str(ccs2$C)
str(ccs3$D)
str(ccs3$C)
View(ccs3)
ccs3$C[1]
ccs3$C[2]
install.packages("janeaustenr")
install.packages("tidytext")
library(dplyr)
library(janeaustenr)
library(tidytext)
??unnest_tokens
?count
book_words <- ccs3() %>%
unnest_tokens(ccs3, C) %>%
count(ccs3, C, sort = TRUE) %>%
ungroup()
book_words <- austen_books() %>%
unnest_tokens(ccs3, C) %>%
count(ccs3, C, sort = TRUE) %>%
ungroup()
atr(ccs3$C)
str(ccs3$C)
book_words <- austen_books() %>%
unnest_tokens(ccs3, F, C) %>%
count(ccs3, C, sort = TRUE) %>%
ungroup()
book_words <- austen_books() %>%
unnest_tokens(ccs3, newC, C) %>%
count(ccs3, C, sort = TRUE) %>%
ungroup()
book_words <- austen_books() %>%
unnest_tokens(Cnew, C) %>%
count(ccs3, sort = TRUE) %>%
ungroup()
book_words <- austen_books() %>%
unnest_tokens(ccs3$Cnew, ccs3$C) %>%
count(ccs3, sort = TRUE) %>%
ungroup()
book_words <- austen_books() %>%
unnest_tokens(Cnew, ccs3$C) %>%
count(ccs3, sort = TRUE) %>%
ungroup()
book_words <- with(ccs3, austen_books() %>%
unnest_tokens(Cnew, C) %>%
count(ccs3, sort = TRUE) %>%
ungroup())
book_words <- ccs3 %>%
unnest_tokens(Cnew, C) %>%
count(ccs3, sort = TRUE) %>%
ungroup()
book_words <- ccs3 %>%
unnest_tokens(Cnew, C) %>%
count(Cnew, sort = TRUE) %>%
ungroup()
book_words
View(book_words)
??tm_map
install.packages("tm")
library(tm)
library(tm)
book_words2 <- tm_map(book_words, removeWords, stopwords("english"))
??tm
??tm_map
book_words2$Cnew2 <- tm_map(book_words$Cnew, removeWords, stopwords("english"))
str(book_words)
books_words <- as.data.frame(book_words)
book_words <- tm_map(book_words, removeWords, stopwords("english"))
books_words <- as.table(book_words)
str(book_words)
books_words <- as.data.frame(book_words)
str(book_words)
book_words <- ccs3 %>%
unnest_tokens(Cnew, C) %>%
count(Cnew, sort = TRUE) %>%
ungroup()
as.data.frame()
book_words <- ccs3 %>%
unnest_tokens(Cnew, C) %>%
count(Cnew, sort = TRUE) %>%
ungroup() %>%
as.data.frame()
str(book_words)
book_words <- tm_map(book_words, removeWords, stopwords("english"))
book_words = Corpus(VectorSource(book_words$Cnew))
inspect(book_words)
book_words <- tm_map(book_words, removeWords, stopwords("english"))
book_words
inspect(book_words)
View(book_words)
heasd(book_words)
head(book_words)
strwrap(book_words[[1]])
strwrap(book_words)
strwrap(book_words[[2]])
strwrap(book_words[[3]])
strwrap(book_words[[4]])
strwrap(book_words[[5]])
strwrap(book_words[[6]])
strwrap(book_words[[10]])
strwrap(book_words[[11]])
strwrap(book_words[[12]])
strwrap(book_words[[2]])
book_words <- ccs3 %>%
unnest_tokens(Cnew, C) %>%
count(Cnew, sort = TRUE) %>%
ungroup() %>%
as.data.frame()
book_words
c <- read.csv("Downloads/Insights_noPHI_small2.csv")
gwd
wd()
getwd()
c <- read.csv("Downloads/Insights_noPHI_small2.csv")
c <- read.csv("~Downloads/Insights_noPHI_small2.csv")
getwd()
setwd("/Users/dana/Spyder/Gits/Machine-Learning-A-Z/Random_Forest_Regression")
dataset = read.csv("Position_Salaries.csv")
rm9pwt
rm(pwt)
rm(pwt2)
rm(pwt2007)
rm(pwt2007c2)
rm(pwt2007c3)
rm(pwt2007c)
rm(pwt3)
rm(slide11)
rm(slide19)
rm(is.num)
View(dataset)
install.packages("randomForest")
library(randomForest)
rfNews()
View(dataset)
getwd()
setwd("/Users/dana/Spyder/Gits/Machine-Learning-A-Z/Random_Forest_Regression")
dataset = read.csv("Position_Salaries.csv")
dataset = dataset[2:3]
##create your regressor here, may look like this:
# dataset$Level2 = dataset$Level^2
# dataset$Level3 = dataset$Level^3
# dataset$Level4 = dataset$Level^4
# regressor = lm(formula = Salary ~ .,
#               data = dataset)
library(randomForest)
regressor = randomForest(x = dataset[1]
, y = dataset$Salary
, ntree = 10)
##dataset[1] gives a sub set dataframe
##dataset$Salary gives a vector
##create your regressor here, may look like this:
# dataset$Level2 = dataset$Level^2
# dataset$Level3 = dataset$Level^3
# dataset$Level4 = dataset$Level^4
# regressor = lm(formula = Salary ~ .,
#               data = dataset)
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1]
, y = dataset$Salary
, ntree = 10)
##dataset[1] gives a sub set dataframe
##dataset$Salary gives a vector
y_pred = predict(regressor, data.frame(Level=6.5)
y_pred = predict(regressor, data.frame(Level=6.5))
##create your regressor here, may look like this:
# dataset$Level2 = dataset$Level^2
# dataset$Level3 = dataset$Level^3
# dataset$Level4 = dataset$Level^4
# regressor = lm(formula = Salary ~ .,
#               data = dataset)
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1]
, y = dataset$Salary
, ntree = 100)
##dataset[1] gives a sub set dataframe
##dataset$Salary gives a vector
y_pred = predict(regressor, data.frame(Level=6.5))
##create your regressor here, may look like this:
# dataset$Level2 = dataset$Level^2
# dataset$Level3 = dataset$Level^3
# dataset$Level4 = dataset$Level^4
# regressor = lm(formula = Salary ~ .,
#               data = dataset)
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1]
, y = dataset$Salary
, ntree = 50)
##dataset[1] gives a sub set dataframe
##dataset$Salary gives a vector
y_pred = predict(regressor, data.frame(Level=6.5))
##create your regressor here, may look like this:
# dataset$Level2 = dataset$Level^2
# dataset$Level3 = dataset$Level^3
# dataset$Level4 = dataset$Level^4
# regressor = lm(formula = Salary ~ .,
#               data = dataset)
library(randomForest)
set.seed(1234)
regressor = randomForest(x = dataset[1]
, y = dataset$Salary
, ntree = 75)
##dataset[1] gives a sub set dataframe
##dataset$Salary gives a vector
y_pred = predict(regressor, data.frame(Level=6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level),max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour ='red') +
geom_line(aes(x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression Model)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level),max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour ='red') +
geom_line(aes(x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression Model)') +
xlab('Level') +
ylab('Salary')
library(ggplot2)
x_grid = seq(min(dataset$Level),max(dataset$Level),0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour ='red') +
geom_line(aes(x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Random Forest Regression Model)') +
xlab('Level') +
ylab('Salary')
